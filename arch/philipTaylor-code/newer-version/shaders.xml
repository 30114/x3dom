<shaders>

<fs id="fs-x3d-textured"><![CDATA[
uniform float ambientIntensity;
uniform vec3 diffuseColor;
uniform vec3 emissiveColor;
uniform float shininess;
uniform vec3 specularColor;
uniform float alpha;
uniform sampler2D tex;

varying vec3 fragNormal;
varying vec3 fragLightVector;
varying vec3 fragEyeVector;
varying vec2 fragTexCoord;

void main(void) {
    vec3 normal = normalize(fragNormal);
    vec3 light = normalize(fragLightVector);
    vec3 eye = normalize(fragEyeVector);
    // TODO: multiple lights, etc
    float diffuse = max(0.0, dot(normal, light));
    float specular = pow(max(0.0, dot(normal, normalize(light+eye))), shininess*128.0);
    vec3 rgb = emissiveColor + diffuse*diffuseColor + specular*specularColor;
    gl_FragColor = vec4(rgb, texture2D(tex, fragTexCoord.xy).a);
}
]]></fs>

<fs id="fs-x3d-untextured"><![CDATA[
uniform float ambientIntensity;
uniform vec3 diffuseColor;
uniform vec3 emissiveColor;
uniform float shininess;
uniform vec3 specularColor;
uniform float alpha;

varying vec3 fragNormal;
varying vec3 fragLightVector;
varying vec3 fragEyeVector;

void main(void) {
    vec3 normal = normalize(fragNormal);
    vec3 light = normalize(fragLightVector);
    vec3 eye = normalize(fragEyeVector);
    // TODO: multiple lights, etc
    float diffuse = max(0.0, dot(normal, light));
    float specular = pow(max(0.0, dot(normal, normalize(light+eye))), shininess*128.0);
    vec3 rgb = emissiveColor + diffuse*diffuseColor + specular*specularColor;
    gl_FragColor = vec4(rgb, 1.0);
}
]]></fs>


<fs id="fs-x3d-shownormal"><![CDATA[
uniform float ambientIntensity;
uniform vec3 diffuseColor;
uniform vec3 emissiveColor;
uniform float shininess;
uniform vec3 specularColor;
uniform float alpha;
uniform sampler2D tex;

varying vec3 fragNormal;
varying vec3 fragLightVector;
varying vec3 fragEyeVector;
varying vec2 fragTexCoord;

void main(void) {
    vec3 normal = normalize(fragNormal);
    gl_FragColor = vec4(normal, 1.0);
}
]]></fs>




<vs id="vs-x3d-textured"><![CDATA[
attribute vec3 position;
attribute vec3 normal;
attribute vec2 texcoord;
varying vec3 fragNormal;
varying vec3 fragLightVector;
varying vec3 fragEyeVector;
varying vec2 fragTexCoord;
uniform mat4 modelViewProjectionMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 modelMatrix;
uniform vec3 lightPosition;
uniform vec3 eyePosition;

void main(void) {
    gl_Position = modelViewProjectionMatrix * vec4(position, 1.0);
    fragNormal = normalize(vec3(modelMatrix * vec4(normal, 0.0)));
    fragLightVector = lightPosition - vec3(modelMatrix * vec4(position, 1.0));
    fragEyeVector = eyePosition - vec3(modelMatrix * vec4(position, 1.0));
    fragTexCoord = texcoord;
}
]]></vs>

<vs id="vs-x3d-untextured"><![CDATA[
attribute vec3 position;
attribute vec3 normal;
varying vec3 fragNormal;
varying vec3 fragLightVector;
varying vec3 fragEyeVector;
uniform mat4 modelViewProjectionMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 modelMatrix;
uniform vec3 lightPosition;
uniform vec3 eyePosition;

void main(void) {
    gl_Position = modelViewProjectionMatrix * vec4(position, 1.0);
    fragNormal = normalize(vec3(modelMatrix * vec4(normal, 0.0)));
    fragLightVector = lightPosition - vec3(modelMatrix * vec4(position, 1.0));
    fragEyeVector = eyePosition - vec3(modelMatrix * vec4(position, 1.0));
}
]]></vs>

</shaders>
