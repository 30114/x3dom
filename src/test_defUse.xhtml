<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
		<title>Simple WebGL example</title>
		<style>
		body { font-family: sans-serif; }
		X3D { display: none; }
		canvas { border: solid; color: #666; float: left; margin-right: 1em; margin-bottom: 1em; }
		p.case { clear: both; border-top: 1px solid #888; }
		div#x3dom_logdiv { height: 30em; overflow: auto; white-space: pre-wrap; font-size: x-small; }
		div#x3dom_logdiv p { margin: 0; }
        div.fps {
            left:-100px;
            position:relative;
            top:20px;
            color:#f40;
            font-size:14px;
        }
		</style>
	</head>
       
<body style="background-color:#E0E0E0;">

    <h1>x3dom simple example</h1>
	
	<p class="case">Image format test <br />
	    <!-- Use the same "x", "y", "width" and "height" attributes as SVG.
             Optionally support the "viewBox" and "preserveAspectRatio" just like SVG -->
		<X3D xmlns="http://www.web3d.org/specifications/x3d-namespace" id="spheres" showFps="true" x="0px" y="10px" width="600px" height="600px">
 <Scene DEF='scene'>
 	<Viewpoint DEF='view0' position='0 0 10'/>
    <Background skyColor='0.05 0.12 0.23'/>
    <Transform translation='-2 0 0'>
      <Shape DEF='obj'>
        <Appearance>
          <ImageTexture url='"texture/generic/x3d_256.jpg"'/>
        </Appearance>
        <Box/>
      </Shape>
    </Transform>
    <Transform translation='2 0 0'>
      <Shape USE='obj'/>
    </Transform>

  </Scene>
        </X3D>

	</p>
	
	<script type="text/javascript"><![CDATA[
	var solid = true;
	
	function toggleRendering()
	{
		var button = document.getElementById("points");
		
		solid = !solid;
		
		if (solid)
			button.value = "Show Points";
		else
			button.value = "Solid/ Fill";
		
		var scenes = document.getElementsByTagName("Scene");
		var i = 0, n = scenes.length;
		
		while (i < n)
		{
			var aScene = scenes[i++];
			aScene.setAttribute("points", (!solid ? "true" : "false"));
		}
		
		window.status = "Found " + n + " Scene objects.";
		
		return false;
	}
	]]></script>
	
	<p class="case"> &nbsp; 
	<input type="button" id="points" value="Show Points" onclick="toggleRendering();" />
	
	<img id="test_img_1" src="data:image/png;base64,
iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAYAAACNMs+9AAAABGdBTUEAALGP
C/xhBQAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAd0SU1FB9YGARc5KB0XV+IA
AAAddEVYdENvbW1lbnQAQ3JlYXRlZCB3aXRoIFRoZSBHSU1Q72QlbgAAAF1J
REFUGNO9zL0NglAAxPEfdLTs4BZM4DIO4C7OwQg2JoQ9LE1exdlYvBBeZ7jq
ch9//q1uH4TLzw4d6+ErXMMcXuHWxId3KOETnnXXV6MJpcq2MLaI97CER3N0
vr4MkhoXe0rZigAAAABJRU5ErkJggg==" alt="Red dot" />
	</p>
	
	<script type="text/javascript" src="x3dom.js"></script>
    <script type="text/javascript" src="debug.js"></script>
	<script type="text/javascript" src="gfx_webgl.js"></script>
	<script type="text/javascript" src="x3d.js"></script>
	<script type="text/javascript" src="fields.js"></script>
	
	<script type="text/javascript" ><![CDATA[
        
       window.onload = function() {
	   return;
            
            /* Test DOM updates by randomly changing the flipper color... */
            var mats = document.getElementsByTagNameNS('http://www.web3d.org/specifications/x3d-namespace', 'Material');
            x3dom.debug.logInfo("Found " + mats.length + " materials.");
            // the last material is the flipper material
            var flipperMat = mats[5];
            // change the color randomly every second
            setInterval( function() {
                    var r, g, b;
                    r = Math.random();
                    g = Math.random();
                    b = Math.random();
                    // the color is X3D and not CSS, thus e.g. red is "1 0 0" rather than "#f00"
                    flipperMat.setAttribute("diffuseColor", r.toString() + " " + g.toString() + " " + b.toString());
                },
                1000
            );

            /* Another DOM updates test which animates the scale of the first cube */
            var trans = document.getElementsByTagNameNS('http://www.web3d.org/specifications/x3d-namespace', 'Transform');           
            var cubeTrans = trans[0];
            var cubeScale = 0;
            var scaleFac = 0.01;
            setInterval( function() {                    
                    if (cubeScale>1.0-scaleFac || cubeScale<(0.0)) {
                        scaleFac *= -1;                        
                    }
                    cubeScale += scaleFac;
                    cubeTrans.setAttribute("scale", cubeScale.toString() + " " + cubeScale.toString() + " " + cubeScale.toString());
                },
                60
            );
        };

	/*
	//window.onload = function() {
		init();
		draw(userData.gl);
	//};
	*/
	]]></script>

</body>
</html>
